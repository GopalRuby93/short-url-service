openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/users":
    post:
      summary: Creates a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                      minLength: 6
                    password_confirmation:
                      type: string
                      minLength: 6
                  required:
                    - name
                    - email
                    - password
                    - password_confirmation
            example:
              user:
                name: "Gopal Chakraborty"
                email: "gopalchakraborty7712@gmail.com"
                password: "password123"
                password_confirmation: "password123"
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          email:
                            type: string
                            format: email
                          password_digest:
                            type: string
                          created_at:
                            type: string
                            format: date-time
                          updated_at:
                            type: string
                            format: date-time
                      token:
                        type: string
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
                  success:
                    type: boolean
              example:
                data:
                  user:
                    id: 8
                    name: "Gopal Chakraborty"
                    email: "gopalchakraborty7712@gmail.com"
                    password_digest: "$2a$12$CthBWQcixs.WR20w5Wr/4.yra16k8iwDaeVQiGBORb9b9XC/FZGLq"
                    created_at: "2025-03-27T16:28:35.998Z"
                    updated_at: "2025-03-27T16:28:35.998Z"
                  token: "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo4LCJleHAiOjE3NDMxMzYxMTZ9.9evOKV5NLTYIbWuQaJ_z2FRf8fEGCOh4z2gB5Vliu4M"
                message: "User registered successfully"
                errors: []
                success: true

  "/api/v1/users/login":
    post:
      summary: User login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
              required:
                - email
                - password
            example:
              email: "puja@gmail.com"
              password: "puja123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          email:
                            type: string
                            format: email
                          password_digest:
                            type: string
                          created_at:
                            type: string
                            format: date-time
                          updated_at:
                            type: string
                            format: date-time
                      token:
                        type: string
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
                  success:
                    type: boolean
              example:
                data:
                  user:
                    id: 13
                    name: "Puja Roy"
                    email: "puja@gmail.com"
                    password_digest: "$2a$12$Dh8KNgZ/x9yBO3oVIvZ7TueMtu/TFIIHXoZtQ768w.kCdyHScCxJ."
                    created_at: "2025-03-27T21:07:01.359Z"
                    updated_at: "2025-03-27T21:07:01.359Z"
                  token: "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxMywiZXhwIjoxNzQzMTUzMzc0fQ.blqbTqMksOkEh9CWYSpvjK7Grf4vaWsbANpPWHNiEoM"
                message: "Login successful"
                errors: []
                success: true
        '401':
          description: Unauthorized (Invalid email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              example:
                error: "Invalid email or password"
                message: "Invalid email or password"

  "/api/v1/short_url_generators":
    post:
      summary: Generate a short URL
      tags:
        - Short URL Generator
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                short_url:
                  type: object
                  properties:
                    original_url:
                      type: string
                      format: uri
                  required:
                    - original_url
            example:
              short_url:
                original_url: "https://interviewready.io/learn/system-design-course/zoom_meets/nov-2024-system-design-of-chatgpt"
      responses:
        '200':
          description: Short URL created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      short_url:
                        type: string
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
                  success:
                    type: boolean
              example:
                data:
                  short_url: "http://127.0.0.1:3001/000000k"
                message: "Short URL created successfully"
                errors: []
                success: true
        '422':
          description: Short URL creation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                  message:
                    type: string
              example:
                error: ["Invalid URL format"]
                message: "Short URL creation failed"

  "/{short_url}":
    get:
      summary: Redirect to the original URL using a short URL
      tags:
        - Short URL Generator
      parameters:
        - name: short_url
          in: path
          required: true
          schema:
            type: string
          description: "The short URL code (e.g., '000000m')"
      responses:
        '302':
          description: Redirects to the original URL
          headers:
            Location:
              description: The original URL to which the short URL points
              schema:
                type: string
        '422':
          description: Short URL not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              example:
                error: "Short URL not found"
                message: "Short URL not found"

servers:
  - url: http://localhost:3001
